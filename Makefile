## Dependency versions

CSI_VERSION=1.3.0
KUBEBUILDER_VERSION=2.3.1
KUSTOMIZE_VERSION=3.9.2
PROTOC_VERSION=3.14.0

## DON'T EDIT BELOW THIS LINE

SUDO=sudo
CURL=curl -Lsf
BINDIR := $(PWD)/bin
CONTROLLER_GEN := $(BINDIR)/controller-gen
KUBEBUILDER_ASSETS := $(BINDIR)
PROTOC := PATH=$(BINDIR):$(PATH) $(BINDIR)/protoc -I=$(PWD)/include:.
PACKAGES := unzip lvm2 xfsprogs

GO_FILES=$(shell find -name '*.go' -not -name '*_test.go')
GOOS := $(shell go env GOOS)
GOARCH := $(shell go env GOARCH)
GO111MODULE = on
GOFLAGS =
export GO111MODULE GOFLAGS KUBEBUILDER_ASSETS

BUILD_TARGET=hypertopols
TOPOLS_VERSION ?= devel
IMAGE_TAG ?= latest

csi.proto:
	$(CURL) -o $@ https://raw.githubusercontent.com/container-storage-interface/spec/v$(CSI_VERSION)/csi.proto
	sed -i 's,^option go_package.*$$,option go_package = "github.com/kvaster/topols/csi";,' csi.proto
	sed -i '/^\/\/ Code generated by make;.*$$/d' csi.proto

csi/csi.pb.go: csi.proto
	mkdir -p csi
	$(PROTOC) --go_out=module=github.com/kvaster/topols:. $<

csi/csi_grpc.pb.go: csi.proto
	mkdir -p csi
	$(PROTOC) --go-grpc_out=module=github.com/kvaster/topols:. $<

PROTOBUF_GEN = csi/csi.pb.go csi/csi_grpc.pb.go

.PHONY: test
test:
	test -z "$$(gofmt -s -l . | grep -v '^vendor' | tee /dev/stderr)"
	~/go/bin/staticcheck ./...
	test -z "$$(~/go/bin/nilerr ./... 2>&1 | tee /dev/stderr)"
	~/go/bin/ineffassign .
	go install ./...
	go test -race -v ./...
	go vet ./...
	test -z "$$(go vet ./... | grep -v '^vendor' | tee /dev/stderr)"

# Generate manifests e.g. CRD, RBAC etc.
.PHONY: manifests
manifests:
	$(CONTROLLER_GEN) \
		crd:crdVersions=v1 \
		rbac:roleName=topols-controller \
		webhook \
		paths="./api/...;./controllers;./hook;./driver/k8s" \
		output:crd:artifacts:config=config/crd/bases
	rm -f deploy/manifests/base/crd.yaml
	cp config/crd/bases/topols.kvaster.com_logicalvolumes.yaml deploy/manifests/base/crd.yaml

.PHONY: generate
generate: $(PROTOBUF_GEN)
	$(CONTROLLER_GEN) object:headerFile=./hack/boilerplate.go.txt paths="./api/..."

.PHONY: check-uncommitted
check-uncommitted:
	$(MAKE) manifests
	$(MAKE) generate
	git diff --exit-code --name-only

.PHONY: build
build: build/hypertopols csi-sidecars

build/hypertopols: $(GO_FILES)
	mkdir -p build
	go build -o $@ -ldflags "-X github.com/kvaster/topols.Version=$(TOPOLS_VERSION)" ./pkg/hypertopols

.PHONY: csi-sidecars
csi-sidecars:
	mkdir -p build
	make -f csi-sidecars.mk OUTPUT_DIR=build

.PHONY: image
image:
	docker build -t $(IMAGE_PREFIX)topols:devel --build-arg TOPOLS_VERSION=$(TOPOLS_VERSION) .

.PHONY: tag
tag:
	docker tag $(IMAGE_PREFIX)topols:devel $(IMAGE_PREFIX)topols:$(IMAGE_TAG)

.PHONY: push
push:
	docker push $(IMAGE_PREFIX)topols:$(IMAGE_TAG)

.PHONY: clean
clean:
	rm -rf build/
	rm -rf bin/
	rm -rf include/

.PHONY: tools
tools:
	cd /tmp; env GO111MODULE=on go get golang.org/x/tools/cmd/goimports
	cd /tmp; env GO111MODULE=on go get honnef.co/go/tools/cmd/staticcheck
	cd /tmp; env GO111MODULE=on go get github.com/gordonklaus/ineffassign
	cd /tmp; env GO111MODULE=on go get github.com/gostaticanalysis/nilerr/cmd/nilerr

.PHONY: setup
setup: tools
	#$(SUDO) apt-get update
	#$(SUDO) apt-get -y install --no-install-recommends $(PACKAGES)
	#if apt-cache show btrfs-progs; then \
	#	$(SUDO) apt-get install -y btrfs-progs; \
	#else \
	#	$(SUDO) apt-get install -y btrfs-tools; \
	#fi

	mkdir -p bin
	curl -sfL https://go.kubebuilder.io/dl/$(KUBEBUILDER_VERSION)/$(GOOS)/$(GOARCH) | tar -xz -C /tmp/
	mv /tmp/kubebuilder_$(KUBEBUILDER_VERSION)_$(GOOS)_$(GOARCH)/bin/* bin/
	rm -rf /tmp/kubebuilder_*
	GOBIN=$(BINDIR) go install sigs.k8s.io/controller-tools/cmd/controller-gen

	curl -sfL -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v$(PROTOC_VERSION)/protoc-$(PROTOC_VERSION)-linux-x86_64.zip
	unzip -o protoc.zip bin/protoc 'include/*'
	rm -f protoc.zip
	GOBIN=$(BINDIR) go install google.golang.org/protobuf/cmd/protoc-gen-go
	GOBIN=$(BINDIR) go install google.golang.org/grpc/cmd/protoc-gen-go-grpc
	GOBIN=$(BINDIR) go install github.com/pseudomuto/protoc-gen-doc/cmd/protoc-gen-doc

	curl -sSLf https://github.com/kubernetes-sigs/kustomize/releases/download/kustomize%2Fv$(KUSTOMIZE_VERSION)/kustomize_v$(KUSTOMIZE_VERSION)_linux_amd64.tar.gz | tar -xz -C $(BINDIR)
	GOBIN=$(BINDIR) go install github.com/onsi/ginkgo/ginkgo
